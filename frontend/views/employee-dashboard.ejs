<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Dashboard</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
        }
        .sidebar {
            width: 200px;
            height: 100vh;
            background: #34000b;
            padding: 20px;
            color: white;
            display: flex;
            flex-direction: column;
            position: fixed;
            overflow-y: auto;
        }
        .sidebar a {
            color: white;
            text-decoration: none;
            padding: 10px;
            display: block;
            border-radius: 5px;
            margin-bottom: 10px;
            transition: background 0.3s;
        }
        .sidebar a:hover {
            background: #c0392b;
        }
        .main-content {
            margin-left: 220px;
            flex-grow: 1;
            padding: 20px;
        }
        .navbar {
            background: #34000b;
            padding: 15px;
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-radius: 10px;
        }
        .welcome-container,
        .container {
            background: rgb(240, 228, 228);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.15);
            margin: 20px auto;
            max-width: 800px;
        }
        .card-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        .card {
            background: rgb(240, 228, 228);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.15);
            text-align: center;
            cursor: pointer;
            width: 150px;
            transition: transform 0.2s;
        }
        .card:hover {
            transform: translateY(-5px);
        }
        .logout-btn {
            background-color: #c0392b;
            padding: 10px;
            border-radius: 5px;
            text-decoration: none;
            color: white;
            font-weight: bold;
        }
        .logout-btn:hover {
            background-color: #a83227;
        }
        .input-group {
            margin: 10px 0;
            text-align: left;
        }
        .input-group label {
            display: block;
            font-weight: bold;
        }
        .input-group input,
        .input-group textarea,
        .input-group select {
            width: 100%;
            padding: 8px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        .btn {
            background-color: #34000b;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }
        .toggle-history-btn{
            background-color: #34000b;
            color: white;
            padding: 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
        }
        .btn:hover {
            background-color: #c0392b;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #34000b;
            color: white;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
        .todo-container {
            margin-top: 20px;
            padding: 15px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 8px;
        }
        .todo-container h4 {
            margin-top: 0;
            border-bottom: 1px solid rgba(255, 255, 255, 0.3);
            padding-bottom: 10px;
        }
        .todo-list {
            list-style: none;
            padding: 0;
        }
        .todo-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px dashed rgba(255, 255, 255, 0.2);
        }
        .todo-item:last-child {
            border-bottom: none;
        }
        .todo-item.completed {
            text-decoration: line-through;
            opacity: 0.7;
        }
        .todo-actions {
            display: flex;
            gap: 5px;
        }
        .todo-actions button {
            background: none;
            border: none;
            color: black;
            cursor: pointer;
            font-size: 20px;
        }
        #todoInput {
            width: calc(100% - 70px);
            padding: 8px;
            border-radius: 5px;
            border: none;
            margin-right: 5px;
        }
        #addTodoBtn {
            padding: 8px 10px;
            border-radius: 5px;
            border: none;
            background: #c0392b;
            color: black;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="sidebar">
        <h3>Employee Panel</h3>
        <a href="#" onclick="showProfile()">Profile</a>
        <a href="#" onclick="applyLeave()">Apply Leave</a>
        <a href="#" onclick="showLeaveHistory()">Leave History</a>
        <a href="#" onclick="showWorkReports()">My Work Reports</a>
        <a href="#" onclick="showTodoPage()">My Tasks</a>
    </div>

    <div class="main-content">
        <div class="navbar">
            <span>Employee Dashboard</span>
            <a href="/employee/logout" class="logout-btn">Logout</a>
        </div>

        <div class="welcome-container" id="welcomeContainer">Welcome to Employee Panel!</div>

        <div class="card-container">
            <div class="card" onclick="showProfile()">Edit Profile</div>
            <div class="card" onclick="applyLeave()">Apply Leave</div>
            <div class="card" onclick="showWorkReports()">My Work Reports</div>
            <div class="card" onclick="showTodoPage()">My Tasks</div>
        </div>

        <!-- Profile Section -->
        <div class="container" id="profileSection" style="display: none">
            <h2>User Profile</h2>
            <div id="viewProfile">
                <p><strong>Name:</strong> <span id="profileName"></span></p>
                <p><strong>Email:</strong> <span id="profileEmail"></span></p>
                <p><strong>Phone:</strong> <span id="profilePhone">Fill the details</span></p>
                <p><strong>Address:</strong> <span id="profileAddress">Fill the details</span></p>
                <p><strong>Department:</strong> <span id="profileDepartment">Fill the details</span></p>
                <button class="btn" onclick="editProfile()">Edit Profile</button>
            </div>
            <div id="editProfile" style="display: none">
                <form onsubmit="updateProfile(event)">
                    <div class="input-group">
                        <label for="name">Name:</label>
                        <input type="text" id="name" name="name" required />
                    </div>
                    <div class="input-group">
                        <label for="email">Email:</label>
                        <input type="email" id="email" name="email" required />
                    </div>
                    <div class="input-group">
                        <label for="phone">Phone:</label>
                        <input type="text" id="phone" name="phone" />
                    </div>
                    <div class="input-group">
                        <label for="address">Address:</label>
                        <input type="text" id="address" name="address" />
                    </div>
                    <div class="input-group">
                        <label for="department">Department:</label>
                        <input type="text" id="department" name="department" />
                    </div>
                    <button type="submit" class="btn">Update Profile</button>
                </form>
            </div>
        </div>

        <!-- Apply Leave Section -->
        <div class="container" id="leaveSection" style="display: none">
            <h2>Apply for Leave</h2>
            <form id="leaveForm">
                <div class="input-group">
                    <label for="leaveStartDate">Leave Start Date:</label>
                    <input type="date" id="leaveStartDate" name="leaveStartDate" required />
                </div>
                <div class="input-group">
                    <label for="leaveEndDate">Leave End Date:</label>
                    <input type="date" id="leaveEndDate" name="leaveEndDate" required />
                </div>
                <div class="input-group">
                    <label for="leaveReason">Reason for Leave:</label>
                    <input type="text" id="leaveReason" name="leaveReason" required />
                </div>
                <button type="submit" class="btn">Apply Leave</button>
            </form>
            <div id="leaveStatus" style="display: none">Leave Applied Successfully!</div>
        </div>

        <!-- Leave History Section -->
        <div class="container" id="leaveHistory" style="display: none">
            <h2>Leave History</h2>
            <div id="historyContent"></div>
        </div>

        <!-- Work Reports Section -->
        <div class="container" id="workReportsSection" style="display: none">
            <h2>Submit Work Report</h2>
            <form id="workReportForm">
                <div class="input-group">
                    <label for="reportStartDate">Start Date:</label>
                    <input type="date" id="reportStartDate" name="reportStartDate" required />
                </div>
                <div class="input-group">
                    <label for="reportEndDate">End Date:</label>
                    <input type="date" id="reportEndDate" name="reportEndDate" required />
                </div>
                <div class="input-group">
                    <label for="totalHours">Total Working Hours:</label>
                    <input type="number" id="totalHours" name="totalHours" min="1" max="24" required />
                </div>
                <div class="input-group">
                    <label for="reportName">Report Name:</label>
                    <input type="text" id="reportName" name="reportName" required />
                </div>
                <div class="input-group">
                    <label for="reportDescription">Work Description:</label>
                    <textarea id="reportDescription" name="reportDescription" required></textarea>
                </div>
                <button type="submit" class="btn">Submit Report</button>
                <div id="reportStatus" style="display: none; margin-top: 15px; padding: 10px;"></div>
            </form>

            <!-- Report History Section -->
            <div class="report-history-container">
                <div class="report-history-header">
                    <h3>Report History</h3>
                    <button class="toggle-history-btn" onclick="toggleReportHistory()">Show History</button>
                </div>
                <div id="reportHistory" style="display: none;">
                    <table id="reportHistoryTable">
                        <thead>
                            <tr>
                                <th>Report Name</th>
                                <th>Period</th>
                                <th>Hours</th>
                                <th>Status</th>
                                <th>Submitted On</th>
                            </tr>
                        </thead>
                        <tbody id="reportHistoryBody">
                            <!-- Reports will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- To-Do List Section -->
        <div class="container" id="todoSection" style="display: none">
            <h2>My Tasks</h2>
            <div class="todo-container">
                <input type="text" id="todoInput" placeholder="Add a new task...">
                <button id="addTodoBtn" onclick="addTodo()">Add</button>
                <ul class="todo-list" id="todoList"></ul>
            </div>
        </div>

        <div class="attendance-chart">
  <canvas id="attendanceChart" width="300" height="300"></canvas>
</div>
    </div>

    <script>
        let currentEmployee = {};
        window.onload = function() {
            const urlParams = new URLSearchParams(window.location.search);
            currentEmployee.name = decodeURIComponent(urlParams.get('name') || '');
            currentEmployee.email = decodeURIComponent(urlParams.get('email') || '');
            
            // Update profile display
            document.getElementById("profileName").innerText = currentEmployee.name;
            document.getElementById("profileEmail").innerText = currentEmployee.email;
            
            // Pre-fill edit form
            document.getElementById("name").value = currentEmployee.name;
            document.getElementById("email").value = currentEmployee.email;
            
            // Load leave history from backend
            loadLeaveHistory();
    
            // Set up form submissions
            setupFormSubmissions();
        };

        function hideAllSections() {
            document.getElementById("profileSection").style.display = "none";
            document.getElementById("leaveSection").style.display = "none";
            document.getElementById("leaveHistory").style.display = "none";
            document.getElementById("workReportsSection").style.display = "none";
            document.getElementById("welcomeContainer").style.display = "none";
            document.querySelector(".card-container").style.display = "none";
            document.getElementById("todoSection").style.display = "none";
        }

        function hideAllSectionsexcept() {
            document.getElementById("profileSection").style.display = "none";
            document.getElementById("leaveSection").style.display = "none";
            document.getElementById("leaveHistory").style.display = "none";
            document.getElementById("workReportsSection").style.display = "none";
            document.getElementById("welcomeContainer").style.display = "none";
            document.getElementById("todoSection").style.display = "none";
        }
    
        function setupFormSubmissions() {
            // Leave form submission
            document.getElementById("leaveForm").addEventListener("submit", function(event) {
                event.preventDefault();
                submitLeaveForm();
            });
    
            // Work report form submission
            document.getElementById("workReportForm").addEventListener("submit", function(event) {
                event.preventDefault();
                submitWorkReport();
            });

            // Todo form submission
            document.getElementById("todoInput").addEventListener("keypress", function(e) {
                if (e.key === "Enter") {
                    e.preventDefault();
                    addTodo();
                }
            });
        }
    
        function showWorkReports() {
            // Hide all other sections
            hideAllSections();
            
            // Show work reports section
            document.getElementById("workReportsSection").style.display = "block";
            
            // Reset form
            document.getElementById("workReportForm").reset();
            document.getElementById("reportStatus").style.display = "none";
            
            // Initially hide report history
            document.getElementById("reportHistory").style.display = "none";
        }
    
        function showDefaultView() {
            document.getElementById("welcomeContainer").style.display = "block";
            document.querySelector(".card-container").style.display = "flex";
            hideAllSections();
        }
    
        function showReportStatus(message, isSuccess) {
            const statusElement = document.getElementById("reportStatus");
            statusElement.textContent = message;
            statusElement.style.color = isSuccess ? "green" : "red";
            statusElement.style.display = "block";
        }
    
        async function submitWorkReport() {
            const reportData = {
                employeeId: currentEmployee.email,
                startDate: document.getElementById("reportStartDate").value,
                endDate: document.getElementById("reportEndDate").value,
                totalHours: document.getElementById("totalHours").value,
                reportName: document.getElementById("reportName").value,
                description: document.getElementById("reportDescription").value
            };
        
            // Validate dates
            if (new Date(reportData.endDate) < new Date(reportData.startDate)) {
                showReportStatus("End date cannot be before start date", false);
                return;
            }
    
            // Show loading state
            const submitBtn = document.querySelector("#workReportForm button[type='submit']");
            submitBtn.disabled = true;
            submitBtn.textContent = "Submitting...";
        
            try {
                const response = await fetch("/employee/submitWorkReport", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(reportData)
                });
        
                const data = await response.json();
        
                if (!response.ok || !data.success) {
                    throw new Error(data.error || "Failed to submit report");
                }
        
                showReportStatus("Work report submitted successfully!", true);
                
                // Reset form after 2 seconds
                setTimeout(() => {
                    document.getElementById("workReportForm").reset();
                    // Load updated report history
                    loadReportHistory();
                }, 2000);
            } catch (error) {
                console.error("Submission error:", error);
                showReportStatus(error.message, false);
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = "Submit Report";
            }
        }
        
        async function loadReportHistory() {
            try {
                const response = await fetch("/employee/getWorkReports", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ email: currentEmployee.email })
                });
        
                const data = await response.json();
        
                if (!response.ok || !data.success) {
                    throw new Error(data.error || "Failed to load reports");
                }
        
                // Display reports in the table
                displayReportHistory(data.reports || []);
            } catch (error) {
                console.error("Error loading work reports:", error);
                document.getElementById("reportHistoryBody").innerHTML = 
                    `<tr><td colspan="5">Error loading report history. Please try again.</td></tr>`;
            }
        }
        
        function displayReportHistory(reports) {
            const tbody = document.getElementById("reportHistoryBody");
            
            
            if (!Array.isArray(reports) || reports.length === 0) {
                tbody.innerHTML = `<tr><td colspan="5">No reports found</td></tr>`;
                return;
            }
            
            // Sort reports by submission date (newest first)
            reports.sort((a, b) => new Date(b.submittedOn) - new Date(a.submittedOn));
            
            tbody.innerHTML = reports.map(report => {
                // Use the report's submittedOn date if available, otherwise use current date/time
                const submittedDate = report.submittedOn ? new Date(report.submittedOn) : new Date();
                
                return `
                    <tr>
                        <td>${report.reportName || 'N/A'}</td>
                        <td>${formatDate(report.startDate)} - ${formatDate(report.endDate)}</td>
                        <td>${report.totalHours || 'N/A'}</td>
                        <td><span class="status-badge" style="color: ${getStatusColor(report.status)}">
                            ${report.status || 'Pending'}
                        </span></td>
                        <td>${formatDateTime(submittedDate)}</td>
                    </tr>
                `;
            }).join('');
        }
        
        // Helper function to format date (assuming this exists elsewhere in your code)
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleDateString();
        }
        
        // Helper function to format date and time (assuming this exists elsewhere in your code)
        function formatDateTime(dateString) {
            if (!dateString) return 'N/A';
            const date = new Date(dateString);
            return date.toLocaleString();
        }
        
        // Helper function to get status color (assuming this exists elsewhere in your code)
        function getStatusColor(status) {
            switch (status?.toLowerCase()) {
                case 'approved': return 'green';
                case 'rejected': return 'red';
                default: return 'orange';
            }
        }        
        function toggleReportHistory() {
            const historyDiv = document.getElementById("reportHistory");
            const toggleBtn = document.querySelector(".toggle-history-btn");
            
            if (historyDiv.style.display === "none") {
                historyDiv.style.display = "block";
                toggleBtn.textContent = "Hide History";
                // Load reports if not already loaded
                if (document.getElementById("reportHistoryBody").children.length === 0) {
                    loadReportHistory();
                }
            } else {
                historyDiv.style.display = "none";
                toggleBtn.textContent = "Show History";
            }
        }

        function showProfile() {
            hideAllSectionsexcept();
            document.getElementById("profileSection").style.display = "block";
        }

        function editProfile() {
            document.getElementById("viewProfile").style.display = "none";
            document.getElementById("editProfile").style.display = "flex";
        }

        function updateProfile(event) {
            event.preventDefault();
            
            // Update currentEmployee object
            currentEmployee.name = document.getElementById("name").value;
            currentEmployee.email = document.getElementById("email").value;
            currentEmployee.phone = document.getElementById("phone").value || "Fill the Details";
            currentEmployee.address = document.getElementById("address").value || "Fill the Details";
            currentEmployee.department = document.getElementById("department").value || "Fill the Details";
            
            // Update profile display
            document.getElementById("profileName").innerText = currentEmployee.name;
            document.getElementById("profileEmail").innerText = currentEmployee.email;
            document.getElementById("profilePhone").innerText = currentEmployee.phone;
            document.getElementById("profileAddress").innerText = currentEmployee.address;
            document.getElementById("profileDepartment").innerText = currentEmployee.department;
            
            document.getElementById("viewProfile").style.display = "block";
            document.getElementById("editProfile").style.display = "none";
        }

        function applyLeave() {
            hideAllSections();
            document.getElementById("leaveSection").style.display = "block";
        }

        function submitLeaveForm() {
            const startDate = document.getElementById("leaveStartDate").value;
            const endDate = document.getElementById("leaveEndDate").value;
            const reason = document.getElementById("leaveReason").value;

            fetch("/employee/applyLeave", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    email: currentEmployee.email,
                    startDate,
                    endDate,
                    reason,
                }),
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then((data) => {
                    if (data.success) {
                        document.getElementById("leaveStatus").style.display = "block";
                        setTimeout(() => {
                            document.getElementById("leaveStatus").style.display = "none";
                            document.getElementById("leaveSection").style.display = "none";
                            loadLeaveHistory();
                        }, 2000);
                    } else {
                        alert("Error applying leave: " + (data.error || "Unknown error"));
                    }
                })
                .catch((error) => {
                    console.error("Error:", error);
                    alert("Error applying leave. Please try again.");
                });
        }

        function loadLeaveHistory() {
            fetch("/employee/getLeaves", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ email: currentEmployee.email }),
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then((data) => {
                    if (data.success) {
                        displayLeaveHistory(data.leaves || []);
                    } else {
                        console.error("Error fetching leave history:", data.error);
                        document.getElementById("historyContent").innerHTML = 
                            "<p>Error loading leave history. Please try again.</p>";
                    }
                })
                .catch((err) => {
                    console.error("Error fetching leave history:", err);
                    document.getElementById("historyContent").innerHTML = 
                        "<p>Error loading leave history. Please try again.</p>";
                });
        }

        function displayLeaveHistory(history) {
            const container = document.getElementById("historyContent");
        
            // Handle undefined or non-array input
            if (!Array.isArray(history) || history.length === 0) {
                container.innerHTML = "<p>No leave history found.</p>";
                return;
            }
        
            container.innerHTML = history
                .map((leave, index) => {
                    const status = leave.status || "Pending"; // Default to Pending if undefined
                    const color =
                        status === "Approved"
                            ? "green"
                            : status === "Rejected"
                            ? "red"
                            : "orange";
        
                    return `
                        <div class="leave-item" style="margin-bottom: 15px; padding: 10px; border-bottom: 1px solid #eee;">
                            <p><strong>Leave ${index + 1}:</strong> ${new Date(leave.startDate).toLocaleDateString()} 
                            to ${new Date(leave.endDate).toLocaleDateString()}</p>
                            <p><strong>Reason:</strong> ${leave.reason}</p>
                            <p>Status: <span style="color: ${color}"><strong>${status}</strong></span></p>
                        </div>`;
                })
                .join("");
        }
        
        function showLeaveHistory() {
            hideAllSections();
            document.getElementById("leaveHistory").style.display = "block";
            loadLeaveHistory();
        }

        // To-Do List Functions
        function showTodoPage() {
            hideAllSections();
            document.getElementById("todoSection").style.display = "block";
            loadTodos();
        }

        async function loadTodos() {
            try {
                const response = await fetch("/employee/getTodos", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ email: currentEmployee.email })
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    throw new Error(data.error || "Failed to load todos");
                }

                displayTodos(data.todos || []);
            } catch (error) {
                console.error("Error loading todos:", error);
                const todoList = document.getElementById('todoList');
                todoList.innerHTML = '<li>Error loading todos. Please try again.</li>';
            }
        }

        function displayTodos(todos) {
            const todoList = document.getElementById('todoList');
            todoList.innerHTML = '';
            
            if (!todos || todos.length === 0) {
                todoList.innerHTML = '<li>No tasks found. Add your first task!</li>';
                return;
            }

            // Sort todos by creation date (newest first)
            todos.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            
            todos.forEach(todo => {
                const li = document.createElement('li');
                li.className = `todo-item ${todo.completed ? 'completed' : ''}`;
                li.dataset.id = todo._id;
                li.innerHTML = `
                    <span>${todo.text}</span>
                    <div class="todo-actions">
                        <button onclick="toggleTodo('${todo._id}')">✓</button>
                        <button onclick="deleteTodo('${todo._id}')">✕</button>
                    </div>
                `;
                todoList.appendChild(li);
            });
        }

        async function addTodo() {
            const input = document.getElementById('todoInput');
            const text = input.value.trim();
            
            if (!text) return;
            
            try {
                const response = await fetch("/employee/addTodo", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        email: currentEmployee.email,
                        text: text
                    })
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    throw new Error(data.error || "Failed to add todo");
                }

                input.value = '';
                await loadTodos();
            } catch (error) {
                console.error("Error adding todo:", error);
                alert("Failed to add todo. Please try again.");
            }
        }

        async function toggleTodo(id) {
            try {
                const response = await fetch("/employee/toggleTodo", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ id })
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    throw new Error(data.error || "Failed to toggle todo");
                }

                await loadTodos();
            } catch (error) {
                console.error("Error toggling todo:", error);
                alert("Failed to toggle todo. Please try again.");
            }
        }

        async function deleteTodo(id) {
            if (!confirm("Are you sure you want to delete this task?")) return;
            
            try {
                const response = await fetch("/employee/deleteTodo", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ id })
                });

                const data = await response.json();

                if (!response.ok || !data.success) {
                    throw new Error(data.error || "Failed to delete todo");
                }

                await loadTodos();
            } catch (error) {
                console.error("Error deleting todo:", error);
                alert("Failed to delete todo. Please try again.");
            }
        }
        
    </script>
</body>
</html>